# Boost.Build support for the Xilinx SDK (XSDK).

# @todo need to generate an app to get the linker script

import errors ;

import toolset ;
import project ;
import feature ;
import targets ;
import type ;
import "class" : new ;
import common ;
import generators ;

import os ;

if [ MATCH (--debug-configuration) : [ modules.peek : ARGV ] ]
{
  .debug-configuration = true ;
}

feature.extend target-os :
  freertos
  xilsystem
  ;

feature.extend instruction-set :
  armv8
  ;

feature.feature xsdk-library : : free ;
feature.feature xsdk-configuration : : free ;
feature.feature xsdk-language : c c++ ;
feature.set-default xsdk-language : c++ ;
feature.feature xsdk-processor-id : 0 1 2 3 ;
feature.set-default xsdk-processor-id : 0 ;

type.register XSDKWS : xsdkws ;

type.register MSS : mss ;

type.register HDF : hdf ;
type.register BIT : bit ;
type.register TCL : tcl ;

rule init ( version ? : command * : options * )
{
  # Check that the host operating system is supported.  If it is not,
  # continue without configuring so we can still build targets that do
  # not need this toolset.
  if [ os.name ] = NT || [ os.name ] = CYGWIN || [ os.name ] = LINUX
  {
    command = [ common.get-invocation-command xsdk : xsct : $(command) ] ;

    if $(command)
    {
      local output-lines = [ SPLIT_BY_CHARACTERS [ SHELL "\"$(command)\" -eval 'puts [version]'" ] : "\n" ] ;

      local detected-version-components = [ MATCH "xsct ([0-9][0-9][0-9][0-9]\\.[0-9])" : $(output-lines[1]) ] ;
      local detected-version = $(detected-version-components[1]) ;

      if ! $(detected-version)
      {
        errors.user-error "xsdk: no version detected" ;
      }

      if $(version)
      {
        if $(detected-version) != $(version)
        {
          errors.user-error "xsdk: detected version (" $(detected-version) ") does not match desired (" $(version) ")" ;
        }
      }

      if $(detected-version)
      {
        version = $(detected-version) ;
      }
    }
    else
    {
      errors.user-error "xsdk: xsct not found at" $(command) ;
    }

    root = [ common.get-absolute-tool-path $(command[-1]) ] ;
    root = $(root:P) ;

    if $(.debug-configuration)
    {
      ECHO "xsdk: using xsdk" $(version) "at" $(root) ;
    }

    toolset.flags xsdk .bin $(condition) : $(root)/bin ;

    local available-libs = [ SHELL "$(root)/bin/xsct " ] ;

    echo "available-libs = " $(available-libs) ;

    # @todo this is where the compilers are on Linxu
    #using gcc : armr5 : $(root)/gnu/armr5/lin/gcc-arm-non-eabi/bin/g++ ;
    #using gcc : aarch64 : $(root)/gnu/aarch64/lin/gcc-arm-non-eabi/bin/g++ ;
  }
  else
  {
    ECHO "xsdk: warning: unsupported operating system" os.name ;
  }
}

class ws-generator : generator
{
  rule __init__ ( * : * )
  {
    generator.__init__ $(1) : $(2) : $(3) : $(4) : $(5) : $(6) : $(7) : $(8) : $(9) ;
  }

  rule run ( project name ? : property-set : sources * )
  {
    echo ws-generator run --------------------- ;
    echo $(project) ;
    echo --------------------- ;
    echo $(name) ;
    echo --------------------- ;
    echo $(property-set) ;
    echo [ $(property-set).raw ] ;
    echo --------------------- ;
    echo $(sources) ;
    for local s in $(sources)
    {
      echo [ $(s).name ] ;
    }
    echo --------------------- ;

    local source = $(sources[0]) ;

    if ! $(name)
    {
      name = [ generator.determine-output-name $(source) ] ;
    }

    echo "name = $(name)" ;

    local a = [ new action $(source) : xsdk.ws-generator : $(property-set) ] ;

    local virtual-targets ;
    local t ;

    t = [ new file-target $(name) : XSDKWS : $(project) : $(a) ] ;
    virtual-targets += [ virtual-target.register $(t) ] ;

    local build-dir = [ $(t).path ] ;
    local xsdkws-name = [ $(t).name ] ;

    local ws-dir = $(build-dir)/$(xsdkws-name) ;

    local hw-dir = $(ws-dir)/hw ;
    local bsp-dir = $(ws-dir)/bsp ;
    local app-dir = $(ws-dir)/app ;

    # targets generated by createhw

    # @todo do not generate the HDF target since it might be circular
    #t = [ new file-target system : HDF : $(project) : $(a) : $(hw-dir) ] ;
    #virtual-targets += [ virtual-target.register $(t) ] ;

    t = [ new file-target system : BIT : $(project) : $(a) : $(hw-dir) ] ;
    virtual-targets += [ virtual-target.register $(t) ] ;

    t = [ new file-target psu_init : TCL : $(project) : $(a) : $(hw-dir) ] ;
    virtual-targets += [ virtual-target.register $(t) ] ;

    #t = [ new file-target psu_init : H : $(project) : $(a) : $(hw-dir) ] ;
    #virtual-targets += [ virtual-target.register $(t) ] ;
    #t = [ new file-target psu_init : C : $(project) : $(a) : $(hw-dir) ] ;
    #virtual-targets += [ virtual-target.register $(t) ] ;
    #t = [ new file-target psu_init_gpl : H : $(project) : $(a) : $(hw-dir) ] ;
    #virtual-targets += [ virtual-target.register $(t) ] ;
    #t = [ new file-target psu_init_gpl : C : $(project) : $(a) : $(hw-dir) ] ;
    #virtual-targets += [ virtual-target.register $(t) ] ;

    # targets generated by createbsp

    t = [ new file-target system : MSS : $(project) : $(a) : $(bsp-dir) ] ;
    virtual-targets += [ virtual-target.register $(t) ] ;

    local properties = [ $(property-set).raw ] ;

    local shared ;
    if <link>shared in $(properties)
    {
      shared = true ;
    }

    local processor ;
    if <instruction-set>armv7 in $(properties)
    {
      processor = cortexr5 ;
    }
    else if <instruction-set>armv8 in $(properties)
    {
      processor = cortexa53 ;
    }
    else
    {
      #errors.error "unsupported processor" ;
      echo "error: unsupported processor" ;
    }

    # @todo more
    local processor-id ;
    if <xsdk-processor-id>0 in $(properties)
    {
      processor-id = 0 ;
    }
    else
    {
      #errors.error "unsupported processor id" ;
      echo "error: unsupported processor id" ;
    }

    # @todo use <library> (or others) to find the libraries by searching the list, get list from xsct repo?
    t = [ new searched-lib-target xil : $(project) : $(shared) : $(bsp-dir)/psu_$(processor)_$(processor-id)/lib : $(a) ] ;
    virtual-targets += [ virtual-target.register $(t) ] ;
    for local l in [ $(property-set).get <xsdk-library> ]
    {
      t = [ new searched-lib-target $(l) : $(project) : $(shared) : $(bsp-dir)/psu_$processor)_$(processor-id)/lib : $(a) ] ;
      virtual-targets += [ virtual-target.register $(t) ] ;
    }

    property-set = [ $(property-set).add-raw <include>$(bsp-dir)/psu_$(processor)_$(processor-id)/include ] ;

    # targets generated by createapp

    property-set = [ $(property-set).add-raw <linkflags>"-T $(app-dir)/src/lscript.ld" ] ;

    echo "properties: " [ $(property-set).raw ] ;
    echo "virtual-targets:" ;
    for local vt in $(virtual-targets)
    {
      echo [ $(vt).name ] ;
    }

    return $(property-set) $(virtual-targets) ;
  }
}

# @todo could also call out the source files?
# generators.register [ new ws-generator xsdk.ws-generator : HDF : XSDKWS HDF BIT TCL MSS LIB ] ;
generators.register [ new ws-generator xsdk.ws-generator : HDF : XSDKWS BIT TCL MSS LIB ] ;

toolset.flags xsdk.ws-generator XSDK_LIBRARIES <xsdk-library> ;

toolset.flags xsdk.ws-generator XSDK_CONFIGURATIONS <xsdk-configuration> ;

toolset.flags xsdk.ws-generator XSDK_LANGUAGE <xsdk-language>c : "-lang c" ;
toolset.flags xsdk.ws-generator XSDK_LANGUAGE <xsdk-language>c++ : "-lang c++" ;

toolset.flags xsdk.ws-generator XSDK_OS <target-os>elf : "-os standalone" ;
toolset.flags xsdk.ws-generator XSDK_OS <target-os>freertos : "-os freertos10_xilinx" ;
toolset.flags xsdk.ws-generator XSDK_OS <target-os>xilsystem : "-os xilsystem" ;

toolset.flags xsdk.ws-generator XSDK_PROC <instruction-set>armv8 : cortexa53 ;
toolset.flags xsdk.ws-generator XSDK_PROC <instruction-set>armv7 : cortexr5 ;

toolset.flags xsdk.ws-generator XSDK_PROC_ID <xsdk-processor-id>0 : 0 ;
toolset.flags xsdk.ws-generator XSDK_PROC_ID <xsdk-processor-id>1 : 1 ;
toolset.flags xsdk.ws-generator XSDK_PROC_ID <xsdk-processor-id>2 : 2 ;
toolset.flags xsdk.ws-generator XSDK_PROC_ID <xsdk-processor-id>3 : 3 ;

toolset.flags xsdk.ws-generator XSDK_LINK <link>shared : configbsp-pass-shared ;
toolset.flags xsdk.ws-generator XSDK_LINK <link>static : configbsp-pass-static ;

actions ws-generator
{
  echo -------------------
  pwd
  echo -------------------
  # $(>)
  echo -------------------
  # $(<)
  echo -------------------
  # $(XSDK_LIBRARIES)
  # $(XSDK_CONFIGURATIONS)
  # $(XSDK_LANGUAGE)
  # $(XSDK_OS)
  # $(XSDK_PROC)
  # $(XSDK_PROC_ID)
  # $(XSDK_LINK)
  echo -------------------
  echo "setws $(<[1])" > $(<[1]:D)/$(<[1]:D=).tcl
  echo ""
  echo "createhw -name hw -hwspec $(>)" >> $(<[1]:D)/$(<[1]:D=).tcl
  echo ""
  echo "createbsp -name bsp -proc psu_$(XSDK_PROC)_$(XSDK_PROC_ID) -hwproject hw $(XSDK_OS)" >> $(<[1]:D)/$(<[1]:D=).tcl
  # @todo not portable
  # @todo figure out how to expand this right
  for l in $(XSDK_LIBRARIES) ; do
    echo "setlib -bsp bsp -lib ${l}" >> $(<[1]:D)/$(<[1]:D=).tcl
  done
  # @todo not portable
  # @todo figure out how to expand this right
  for c in "$(XSDK_CONFIGURATIONS)" ; do
    echo "configbsp -bsp bsp ${c}" >> $(<[1]:D)/$(<[1]:D=).tcl
  done
  echo "updatemss -mss $(<[1])/bsp/system.mss" >> $(<[1]:D)/$(<[1]:D=).tcl
  echo "regenbsp -bsp bsp" >> $(<[1]:D)/$(<[1]:D=).tcl
  echo "projects -build -type bsp -name bsp" >> $(<[1]:D)/$(<[1]:D=).tcl
  echo ""
  # @todo generate lang based on sources
  echo "createapp -name app $(XSDK_LANGUAGE) -proc psu_$(XSDK_PROC)_$(XSDK_PROC_ID) -hwproject hw $(XSDK_OS)" >> $(<[1]:D)/$(<[1]:D=).tcl
  echo ""
  # @todo print out all available options
  echo running the following script -------------------
  cat $(<[1]:D)/$(<[1]:D=).tcl
  $(.bin)/xsct $(<[1]:D)/$(<[1]:D=).tcl > $(<[1]:D)/$(<[1]:D=).log
  cat $(<[1]:D)/$(<[1]:D=).log
  echo -------------------
  # echo "# generated hdf" > $(<[2]:D)/$(>:D=)
  # echo "# generated bit" > $(<[2])
  # echo "proc psu_init {} {};" > $(<[3])
  # echo "void psu_init ();" > $(<[4])
  # echo "void psu_init () {};" > $(<[5])
  # echo "void psu_init_gpl ();" > $(<[6])
  # echo "void psu_init_gpl () {};" > $(<[7])

  # echo "# system.mss" > $(<[2])
  # mkdir -p $(<[1])/bsp/psu_$(XSDK_PROC)_$(XSDK_PROC_ID)/include
  # mkdir -p $(<[1])/bsp/psu_$(XSDK_PROC)_$(XSDK_PROC_ID)/lib

  # echo "#lscript.ld" > $(<[1])/app/src/lscript.ld
}
