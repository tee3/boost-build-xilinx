# Boost.Build support for the Xilinx SDK (XSDK).

import errors ;

import toolset ;
import feature ;
import type ;
import generators ;
import common ;
import print ;

import os ;

if [ MATCH (--debug-configuration) : [ modules.peek : ARGV ] ]
{
  .debug-configuration = true ;
}

feature.extend target-os :
  freertos
  xilsystem
  ;

feature.extend instruction-set :
  armv8
  ;

# @todo fix this
#feature.feature xsdk-template : : optional free link-incompatible ;
feature.feature xsdk-library : : optional free ;
feature.feature xsdk-configuration : : optional free link-incompatible ;
feature.feature xsdk-language : c c++ : propagated link-incompatible ;
feature.set-default xsdk-language : c++ ;
feature.feature xsdk-processor-id : 0 1 2 3 : propagated link-incompatible ;
feature.set-default xsdk-processor-id : 0 ;

type.register XSDKWS : xsdkws ;

type.register XSCT : xsct ;

type.register MSS : mss ;

type.register HDF : hdf ;
type.register BIT : bit ;
type.register TCL : tcl ;

rule init ( version ? : command * : options * )
{
  # Check that the host operating system is supported.  If it is not,
  # continue without configuring so we can still build targets that do
  # not need this toolset.
  if [ os.name ] = NT || [ os.name ] = CYGWIN || [ os.name ] = LINUX
  {
    command = [ common.get-invocation-command xsdk : xsct : $(command) ] ;

    if $(command)
    {
      local output-lines = [ SPLIT_BY_CHARACTERS [ SHELL "\"$(command)\" -eval 'puts [version]'" ] : "\n" ] ;

      local detected-version-components = [ MATCH "xsct ([0-9][0-9][0-9][0-9]\\.[0-9])" : $(output-lines[1]) ] ;
      local detected-version = $(detected-version-components[1]) ;

      if ! $(detected-version)
      {
        errors.user-error "xsdk: no version detected" ;
      }

      if $(version)
      {
        if $(detected-version) != $(version)
        {
          errors.user-error "xsdk: detected version (" $(detected-version) ") does not match desired (" $(version) ")" ;
        }
      }

      if $(detected-version)
      {
        version = $(detected-version) ;
      }
    }
    else
    {
      errors.user-error "xsdk: xsct not found at" $(command) ;
    }

    root = [ common.get-absolute-tool-path $(command[-1]) ] ;
    root = $(root:P) ;

    if $(.debug-configuration)
    {
      ECHO "xsdk: using xsdk" $(version) "at" $(root) ;
    }

    toolset.flags xsdk .bin $(condition) : $(root)/bin ;

    # @todo this is where the compilers are on Linxu
    #using gcc : armr5 : $(root)/gnu/armr5/lin/gcc-arm-non-eabi/bin/g++ ;
    #using gcc : aarch64 : $(root)/gnu/aarch64/lin/gcc-arm-non-eabi/bin/g++ ;
  }
  else
  {
    ECHO "xsdk: warning: unsupported operating system" os.name ;
  }
}

generators.register-standard xsdk.ws-generator
  :
    HDF
  :
    XSDKWS(%)
    XSCT(%)

    BIT(%.xsdkws/hw/system)
    TCL(%.xsdkws/hw/psu_init)

    MSS(%.xsdkws/bsp/system)
  ;

# @todo fix this
#toolset.flags xsdk.ws-generator XSDK_TEMPLATE <xsdk-template> ;

toolset.flags xsdk.ws-generator XSDK_LIBRARIES <xsdk-library> ;

toolset.flags xsdk.ws-generator XSDK_CONFIGURATIONS <xsdk-configuration> ;

toolset.flags xsdk.ws-generator XSDK_LANGUAGE <xsdk-language>c : "-lang c" ;
toolset.flags xsdk.ws-generator XSDK_LANGUAGE <xsdk-language>c++ : "-lang c++" ;

toolset.flags xsdk.ws-generator XSDK_OS <target-os>elf : "-os standalone" ;
toolset.flags xsdk.ws-generator XSDK_OS <target-os>freertos : "-os freertos10_xilinx" ;
toolset.flags xsdk.ws-generator XSDK_OS <target-os>xilsystem : "-os xilsystem" ;

toolset.flags xsdk.ws-generator XSDK_PROC <instruction-set>armv8 : cortexa53 ;
toolset.flags xsdk.ws-generator XSDK_PROC <instruction-set>armv7 : cortexr5 ;

toolset.flags xsdk.ws-generator XSDK_PROC_ID <xsdk-processor-id>0 : 0 ;
toolset.flags xsdk.ws-generator XSDK_PROC_ID <xsdk-processor-id>1 : 1 ;
toolset.flags xsdk.ws-generator XSDK_PROC_ID <xsdk-processor-id>2 : 2 ;
toolset.flags xsdk.ws-generator XSDK_PROC_ID <xsdk-processor-id>3 : 3 ;

toolset.flags xsdk.ws-generator XSDK_LINK <link>shared : configbsp-pass-shared ;
toolset.flags xsdk.ws-generator XSDK_LINK <link>static : configbsp-pass-static ;

rule ws-generator ( targets + : sources + : properties * )
{
  echo ws-generator rule -------------- ;
  echo $(targets) ;
  echo ---------------- ;
  echo $(sources) ;
  echo ---------------- ;
  echo $(properties) ;
  echo ---------------- ;

  echo "TARGET LOCATION " [ on $(targets[1]) return $(LOCATION) ] ;

  local lines =
    "#!/usr/bin/env xsct"
    "# DO NOT MODIFY - generated by Boost.Build xsdk.jam"
    ""
    "if {$argc != 1} then {"
    "    exit 1"
    "}"
    "setws $(<[1])"
    ""
    "createhw -name hw -hwspec $(>)"
    ""
    "createbsp -name bsp -proc psu_$(XSDK_PROC)_$(XSDK_PROC_ID) -hwproject hw $(XSDK_OS)"
    ;

  print.output $(targets[2]) ;
  print.text $(lines) : true ;
}

actions ws-generator
{
  echo ws-generator action -------------------
  pwd
  echo -------------------
  # $(>)
  echo -------------------
  # $(<)
  echo -------------------
  # $(XSDK_TEMPLATE)
  # $(XSDK_LIBRARIES)
  # $(XSDK_CONFIGURATIONS)
  # $(XSDK_LANGUAGE)
  # $(XSDK_OS)
  # $(XSDK_PROC)
  # $(XSDK_PROC_ID)
  # $(XSDK_LINK)
  echo -------------------
  echo "setws $(<[1])" > $(<[1]:S=.tcl)
  echo "" $(<[1]:S=.tcl)
  echo "createhw -name hw -hwspec $(>)" >> $(<[1]:S=.tcl)
  echo "" $(<[1]:S=.tcl)
  echo "createbsp -name bsp -proc psu_$(XSDK_PROC)_$(XSDK_PROC_ID) -hwproject hw $(XSDK_OS)" >> $(<[1]:S=.tcl)
  # @todo not portable
  # @todo figure out how to expand this right
  for l in $(XSDK_LIBRARIES) ; do
    echo "setlib -bsp bsp -lib ${l}" >> $(<[1]:S=.tcl)
  done
  # @todo not portable
  # @todo figure out how to expand this right
  for c in "$(XSDK_CONFIGURATIONS)" ; do
    echo "configbsp -bsp bsp ${c}" >> $(<[1]:S=.tcl)
  done
  echo "updatemss -mss $(<[1])/bsp/system.mss" >> $(<[1]:S=.tcl)
  echo "regenbsp -bsp bsp" >> $(<[1]:S=.tcl)
  echo "projects -build -type bsp -name bsp" >> $(<[1]:S=.tcl)
  echo "" $(<[1]:S=.tcl)
  # @todo fix this
  #echo "createapp -name app -app {$(XSDK_TEMPLATE)} $(XSDK_LANGUAGE) -bsp bsp -proc psu_$(XSDK_PROC)_$(XSDK_PROC_ID) -hwproject hw $(XSDK_OS)" >> $(<[1]:S=.tcl)
  echo "createapp -name app -app {} $(XSDK_LANGUAGE) -bsp bsp -proc psu_$(XSDK_PROC)_$(XSDK_PROC_ID) -hwproject hw $(XSDK_OS)" >> $(<[1]:S=.tcl)
  echo "" $(<[1]:S=.tcl)
  # @todo print out all available options
  echo running the following script -------------------
  cat $(<[1]:S=.tcl)
  $(.bin)/xsct $(<[1]:S=.tcl) > $(<[1]:S=.log)
  cat $(<[1]:S=.log)
  echo -------------------
}
