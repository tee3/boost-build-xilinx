# Boost.Build support for the Xilinx SDK (XSDK).

import os ;
import path ;
import common ;
import print ;
import sequence ;
import errors ;
import assert ;

import toolset ;
import feature ;
import type ;
import "class" ;
import generators ;
import property-set ;

if [ MATCH (--debug-configuration) : [ modules.peek : ARGV ] ]
{
  .debug-configuration = true ;
}

feature.feature xsdk-template : : free ;
feature.feature xsdk-configuration : : optional free link-incompatible ;
feature.feature xsdk-library : : optional free ;

feature.feature xsdk-os
  : # values
    standalone
    freertos10_xilinx
    xilkernel
  : # attributes
    propagated optional
  ;

# @todo until all target-os supported in Boost.Build
for local t in freertos xilkernel
{
  local target-os-values = [ feature.values <target-os> ] ;
  if ! $(t) in $(target-os-values)
  {
    feature.extend target-os : $(t) ;
  }
}

feature.feature xsdk-instruction-set
  : # values
    # arm
    cortexa9
    cortexa53
    cortexr5
  : # attributes
    propagated optional
  ;

# @todo until all instruction-set supported in Boost.Build
for local t in cortex-a9 cortex-a53 cortex-r5

{
  local instruction-set-values = [ feature.values <instruction-set> ] ;
  if ! $(t) in $(instruction-set-values)
  {
    feature.extend instruction-set : $(t) ;
  }
}

feature.feature xsdk-processor-id : 0 1 2 3 : link-incompatible ;
feature.set-default xsdk-processor-id : 0 ;

type.register XSDKWS : xsdkws ;

type.register HDF : hdf ;

type.register XSCT : xsct ;
type.register XSCTRUN : xsctrun ;

type.register MSS : mss ;
type.register BIT : bit ;
type.register TCL : tcl ;

rule init ( version ? : command * : options * )
{
  # Check that the host operating system is supported.  If it is not,
  # continue without configuring so we can still build targets that do
  # not need this toolset.
  if [ os.name ] = NT || [ os.name ] = CYGWIN || [ os.name ] = LINUX
  {
    command = [ common.get-invocation-command xsdk : xsct : $(command) ] ;

    if $(command)
    {
      local output-lines = [ SPLIT_BY_CHARACTERS [ SHELL "\"$(command)\" -eval \"puts [version]\"" ] : "\n" ] ;

      local detected-version-components = [ MATCH "xsct ([0-9][0-9][0-9][0-9]\\.[0-9])" : $(output-lines[1]) ] ;
      local detected-version = $(detected-version-components[1]) ;

      if ! $(detected-version)
      {
        errors.user-error "xsdk: no version detected" ;
      }

      if $(version)
      {
        if $(detected-version) != $(version)
        {
          errors.user-error "xsdk: detected version (" $(detected-version) ") does not match desired (" $(version) ")" ;
        }
      }

      if $(detected-version)
      {
        version = $(detected-version) ;
      }
    }
    else
    {
      errors.user-error "xsdk: xsct not found at" $(command) ;
    }

    root = [ common.get-absolute-tool-path $(command[-1]) ] ;
    root = [ path.make $(root:D) ] ;

    if $(.debug-configuration)
    {
      ECHO "xsdk: using xsdk" $(version) "at" $(root) ;

      ECHO "xsdk: available application templates" ;
      ECHO [ SHELL "\"$(root)/bin/xsct\" -eval \"puts [repo -apps]\"" ] ;
      ECHO "xsdk: available operating systems" ;
      ECHO [ SHELL "\"$(root)/bin/xsct\" -eval \"puts [repo -os]\"" ] ;
      ECHO "xsdk: available libraries" ;
      ECHO [ SHELL "\"$(root)/bin/xsct\" -eval \"puts [repo -libs]\"" ] ;
      ECHO "xsdk: available drivers" ;
      ECHO [ SHELL "\"$(root)/bin/xsct\" -eval \"puts [repo -drivers]\"" ] ;
    }

    toolset.flags xsdk .xsct $(condition) : $(root)/bin/xsct ;
  }
  else
  {
    ECHO "xsdk: warning: unsupported operating system" os.name ;
  }
}

rule root ( )
{
  return $(root) ;
}

class build-and-run-generator : generator
{
  import errors ;
  import assert ;

  rule __init__ ( id composing ? : source-types + : target-types-and-names + : requirements * )
  {
    generator.__init__ $(id) $(composing) : $(source-types) : $(target-types-and-names) : $(requirements) ;
  }

  rule run ( project name ? : property-set : sources * )
  {
    assert.equal [ sequence.length $(sources) ] : 1 ;

    local ps = [ property-set.empty ] ;

    local xsdk-os = [ target-os-to-xsdk [ $(property-set).get <target-os> ] ] ;
    if ! $(xsdk-os)
    {
      errors.user-error "unsupported <target-os> " [ $(property-set).get <target-os> ] ;
    }
    ps = [ $(ps).add-raw <xsdk-os>$(xsdk-os) ] ;

    local xsdk-instruction-set = [ instruction-set-to-xsdk [ $(property-set).get <instruction-set> ] ] ;
    if ! $(xsdk-instruction-set)
    {
      errors.user-error "unsupported <instruction-set> " [ $(property-set).get <instruction-set> ] ;
    }
    ps = [ $(ps).add-raw <xsdk-instruction-set>$(xsdk-instruction-set) ] ;

    ps = [ $(ps).add-raw <relevant>target-os ] ;
    ps = [ $(ps).add-raw <relevant>link ] ;
    ps = [ $(ps).add-raw <relevant>optimization ] ;
    ps = [ $(ps).add-raw <relevant>instruction-set ] ;
    ps = [ $(ps).add-raw <relevant>xsdk-processor-id ] ;

    # ps = [ $(ps).add-raw <relevant>toolset ] ;
    ps = [ $(ps).add-raw <relevant>include ] ;
    ps = [ $(ps).add-raw <relevant>define ] ;
    ps = [ $(ps).add-raw <relevant>cflags ] ;
    ps = [ $(ps).add-raw <relevant>linkflags ] ;
    ps = [ $(ps).add-raw <relevant>library ] ;

    # add generated properties to this target
    property-set = [ $(property-set).add $(ps) ] ;

    r = [ generator.run $(project) $(name) : $(property-set) : $(sources) ] ;

    if [ class.is-a $(r[1]) : property-set ]
    {
      r = [ $(r[1]).add $(ps) ] $(r[2-]) ;
    }
    else
    {
      r = $(ps) $(r) ;
    }

    return $(r) ;
  }

  rule generated-targets ( sources + : property-set : project name ? )
  {
    return [ generator.generated-targets $(sources) : $(property-set) : $(project) $(name) ] ;
  }

  rule target-os-to-xsdk ( value )
  {
    assert.in $(value) : [ feature.values <target-os> ] ;

    local tmp ;
    switch $(value)
    {
      case elf : tmp = standalone ;
      case freertos : tmp = freertos10_xilinx ;
      case xilkernel : tmp = xilkernel ;
    }

    assert.variable-not-empty tmp ;

    return $(tmp) ;
  }

  rule instruction-set-to-xsdk ( value )
  {
    assert.in $(value) : [ feature.values <instruction-set> ] ;

    local tmp ;
    switch $(value)
    {
      case cortex-a9 : tmp = cortexa9 ;
      case cortex-a53 : tmp = cortexa53 ;
      case cortex-r5 : tmp = cortexr5 ;
    }

    assert.variable-not-empty tmp ;

    return $(tmp) ;
  }
}

class ws-generator : generator
{
  import errors ;
  import assert ;

  rule __init__ ( id composing ? : source-types + : target-types-and-names + : requirements * )
  {
    generator.__init__ $(id) $(composing) : $(source-types) : $(target-types-and-names) : $(requirements) ;
  }

  rule run ( project name ? : property-set : sources * )
  {
    local r = [ generator.run $(project) $(name) : $(property-set) : $(sources) ] ;

    local ps ;
    local vts ;

    if [ class.is-a $(r[1]) : property-set ]
    {
      ps = $(r[1]) ;
      vts = $(r[2-]) ;
    }
    else
    {
      vts = $(r) ;
    }

    assert.equal [ $(vts[1]).type ] : XSDKWS ;

    local ws-dir ;
    {
      local p = [ $(vts[1]).path ] ;
      local n = [ $(vts[1]).name ] ;

      ws-dir = $(p)/$(n) ;
    }

    ps = [ $(ps).add-raw <relevant>target-os ] ;
    ps = [ $(ps).add-raw <relevant>variant ] ;
    ps = [ $(ps).add-raw <relevant>link ] ;
    ps = [ $(ps).add-raw <relevant>optimization ] ;
    ps = [ $(ps).add-raw <relevant>instruction-set ] ;
    ps = [ $(ps).add-raw <relevant>xsdk-processor-id ] ;

    # ps = [ $(ps).add-raw <relevant>toolset ] ;
    ps = [ $(ps).add-raw <relevant>include ] ;
    ps = [ $(ps).add-raw <relevant>define ] ;
    ps = [ $(ps).add-raw <relevant>cflags ] ;
    ps = [ $(ps).add-raw <relevant>linkflags ] ;
    ps = [ $(ps).add-raw <relevant>library ] ;

    # add properties from createhw

    ps = [ $(ps).add-raw <include>$(ws-dir)/hw ] ;

    local instruction-set = [ $(property-set).get <instruction-set> ] ;

    # @todo this cannot work due to toolset and usage-requirement
    # toolset = [ instruction-set-to-toolset $(instruction-set) ] ;
    # ps = [ $(ps).add-raw <toolset>$(toolset) ] ;

    # @todo these should be done in gcc.jam really
    # @todo support specific instruction-sets better
    ps = [ $(ps).add-raw <cflags>-mtune=$(instruction-set) ] ;
    switch $(instruction-set)
    {
      case cortex-r5 : ps = [ $(ps).add-raw <cflags>-mfpu=vfpv3-d16 ] ;
    }

    # add properties from createbsp

    for local vt in $(vts)
    {
      if [ type.is-derived [ $(vt).type ] LIB ]
      {
        local s = [ $(vt).search ] ;

        ps = [ $(ps).add-raw <include>$(s:D)/include ] ;
      }
    }

    # add properties from createapp

    local defines = [ instruction-set-to-defines $(instruction-set) ] ;

    ps = [ $(ps).add-raw <define>$(defines) ] ;

    ps = [ $(ps).add-raw <linkflags>"-T $(ws-dir)/app/src/lscript.ld" ] ;

    return $(ps) $(vts) ;
  }

  rule generated-targets ( sources + : property-set : project name ? )
  {
    assert.equal [ sequence.length $(sources) ] : 1 ;

    if ! $(name)
    {
      name = [ generator.determine-output-name $(sources[1]) ] ;
    }

    local shared ;
    if [ $(property-set).get <link> ] = shared
    {
      shared = true ;
    }

    local xsdk-instruction-set = [ $(property-set).get <xsdk-instruction-set> ] ;
    local xsdk-processor-id = [ $(property-set).get <xsdk-processor-id> ] ;

    assert.variable-not-empty xsdk-instruction-set ;
    assert.variable-not-empty xsdk-processor-id ;

    local virtual-targets ;

    local a = [ class.new action $(sources) : xsdk.generate-ws : $(property-set) ] ;

    local t ;

    t = [ class.new file-target $(name) : XSDKWS : $(project) : $(a) ] ;
    virtual-targets += [ virtual-target.register $(t) ] ;

    local build-dir = [ $(t).path ] ;
    local ws = [ $(t).name ] ;

    local bsp-dir = $(build-dir)/$(ws)/bsp/psu_$(xsdk-instruction-set)_$(xsdk-processor-id) ;

    assert.variable-not-empty bsp-dir ;

    # targets generated by createhw

    # @todo do not generate the HDF target since it might be circular
    #t = [ class.new file-target $(ws)/hw/system : HDF : $(project) : $(a) ] ;
    #virtual-targets += [ virtual-target.register $(t) ] ;

    t = [ class.new file-target $(ws)/hw/system : BIT : $(project) : $(a) ] ;
    virtual-targets += [ virtual-target.register $(t) ] ;

    t = [ class.new file-target $(ws)/hw/psu_init : TCL : $(project) : $(a)  ] ;
    virtual-targets += [ virtual-target.register $(t) ] ;

    t = [ class.new file-target $(ws)/hw/psu_init : H : $(project) : $(a)  ] ;
    virtual-targets += [ virtual-target.register $(t) ] ;
    t = [ class.new file-target $(ws)/hw/psu_init_gpl : H : $(project) : $(a)  ] ;
    virtual-targets += [ virtual-target.register $(t) ] ;
    # @todo this should not be linked in except in very specific circumstances
    # t = [ class.new file-target $(ws)/hw/psu_init : C : $(project) : $(a)  ] ;
    # virtual-targets += [ virtual-target.register $(t) ] ;
    # @todo this duplicates whats in psu_init for some reason, which one is the right one?
    # t = [ class.new file-target $(ws)/hw/psu_init_gpl : C : $(project) : $(a)  ] ;
    # virtual-targets += [ virtual-target.register $(t) ] ;

    # targets generated by createbsp

    t = [ class.new file-target $(ws)/bsp/system : MSS : $(project) : $(a) ] ;
    virtual-targets += [ virtual-target.register $(t) ] ;

    t = [ class.new searched-lib-target xil : $(project) : $(shared) : $(bsp-dir)/lib : $(a) ] ;
    virtual-targets += [ virtual-target.register $(t) ] ;

    if [ $(property-set).get <freertos> ] = freertos
    {
      t = [ class.new searched-lib-target freertos : $(project) : $(shared) : $(bsp-dir)/lib : $(a) ] ;
      virtual-targets += [ virtual-target.register $(t) ] ;
    }

    for local l in [ $(property-set).get <xsdk-library> ]
    {
      local translated-l = [ xsdk-library-to-library $(l) ] ;

      t = [ class.new searched-lib-target $(translated-l) : $(project) : $(shared) : $(bsp-dir)/lib : $(a) ] ;
      virtual-targets += [ virtual-target.register $(t) ] ;
    }

    return $(virtual-targets) ;
  }

  rule instruction-set-to-defines ( value )
  {
    assert.in $(value) : [ feature.values <instruction-set> ] ;

    local tmp ;
    switch $(value)
    {
      case cortex-r5 : tmp += ARMR5 ;
    }

    return $(tmp) ;
  }

  rule instruction-set-to-toolset ( value )
  {
    assert.in $(value) : [ feature.values <instruction-set> ] ;

    local tmp ;
    switch $(value)
    {
      case cortex-r5 : tmp = gcc-7xilinxarmr5 ;
      case cortex-a53 : tmp = gcc-7xilinxaarch64 ;
    }

    assert.variable-not-empty tmp ;

    return $(tmp) ;
  }

  rule xsdk-library-to-library ( value )
  {
    local tmp = $(value) ;
    switch $(tmp)
    {
      case libmetal : tmp = metal ;
      case openamp : tmp = open_amp ;
    }

    assert.variable-not-empty tmp ;

    return $(tmp) ;
  }
}

generators.register [ class.new build-and-run-generator xsdk.generate-build-and-run : HDF : XSCT TCL(%-run) ] ;
generators.register-standard xsdk.run-xsct : XSCT : XSCTRUN ;
generators.register [ class.new ws-generator xsdk.generate-ws : XSCTRUN : XSDKWS BIT H TCL MSS LIB ] ;

rule generate-build-and-run ( targets + : sources + : properties * )
{
  assert.equal [ sequence.length $(targets) ] : 2 ;
  assert.equal [ sequence.length $(sources) ] : 1 ;

  generate-build $(targets[1]) : $(sources) : $(properties) ;
  generate-run $(targets[2]) : $(targets[1]) $(sources) : $(properties) ;
}

rule generate-build ( targets + : sources + : properties * )
{
  assert.equal [ sequence.length $(targets) ] : 1 ;
  assert.equal [ sequence.length $(sources) ] : 1 ;

  local target = $(targets[1]) ;
  local source = $(sources[1]) ;
  local ws-dir = [ on $(target) return $(LOCATE) ] ;
  local ws-name = $(target:G=) ;
  local ws = $(ws-dir)/$(ws-name:S=.xsdkws) ;

  local hdf = $(source:G=) ;

  local xsdk-os = [ feature.get-values <xsdk-os> : $(properties) ] ;
  local xsdk-instruction-set = [ feature.get-values <xsdk-instruction-set> : $(properties) ] ;
  local xsdk-processor-id = [ feature.get-values <xsdk-processor-id> : $(properties) ] ;
  local xsdk-template = [ feature.get-values <xsdk-template> : $(properties) ] ;
  xsdk-template ?= "Empty Application" ;

  assert.variable-not-empty xsdk-os ;
  assert.variable-not-empty xsdk-instruction-set ;
  assert.variable-not-empty xsdk-processor-id ;

  local lines ;

  # @todo check for errors

  # @todo delete the workspace if it exists
###  lines +=
###    "if {[file exists $(ws)]} then {"
###    "    puts \"error: $(ws) exists.\""
###    "    exit 1"
###    "}"
###  ;

  # set the workspace
  lines += "setws $(ws)" ;

  # create the hardware
  # @todo check for errors
  lines += "createhw -name hw -hwspec $(hdf)" ;

  # create and configure the bsp
  # @todo print out all available options nicely
  # @todo check for errors
  lines += "createbsp -name bsp -proc psu_$(xsdk-instruction-set)_$(xsdk-processor-id) -hwproject hw -os $(xsdk-os)" ;
  # @todo print out all available options for each library nicely
  for local l in [ feature.get-values <xsdk-library> : $(properties) ]
  {
    # @todo check for errors
    lines += "setlib -bsp bsp -lib $(l)" ;
  }
  # @todo print out all available options nicely
  for local c in [ feature.get-values <xsdk-configuration> : $(properties) ]
  {
    # @todo check for errors
    lines += "configbsp -bsp bsp $(c)" ;
  }

  lines += "updatemss -mss $(ws)/bsp/system.mss" ;
  lines += "regenbsp -bsp bsp" ;

  # create a dummy application for the linker file
  # @todo check for errors
  lines += "createapp -name app -app {$(xsdk-template)} -lang c -bsp bsp -proc psu_$(xsdk-instruction-set)_$(xsdk-processor-id) -hwproject hw -os $(xsdk-os)" ;

  # build the bsp (but not the application)
  # @todo check for errors
  lines += "projects -build -type bsp -name bsp" ;

  print.output $(target) ;
  print.text "#!/usr/bin/env xsct" : true ;
  print.text "# generated by xsdk.jam" ;
  print.lines $(lines) ;
  print.text "" ;
}

rule generate-run ( targets + : sources + : properties * )
{
  assert.equal [ sequence.length $(targets) ] : 1 ;
  assert.equal [ sequence.length $(sources) ] : 2 ;

  local target = $(targets[1]) ;
  local build-source = $(sources[1]) ;
  local hdf-source = $(sources[2]) ;

  local ws-dir = [ on $(build-source) return $(LOCATE) ] ;
  local ws-name = $(build-source:G=) ;
  local ws = $(ws-dir)/$(ws-name:S=.xsdkws) ;

  local fpga-name = $(hdf-source:B) ;

  local lines ;

  lines += "set xsdkroot [file normalize $(root)]" ;

  # @todo check for errors

  # set the workspace
  lines +=
    "if {$argc != 1} then {"
    "    puts \"usage: $argv0 <program>\""
    "    exit 1"
    "}"
    ;

  lines +=
    "set ws [file normalize $(ws)]"

    "set hdf [file normalize [file join $ws system.hdf]]"
    "set bit [file normalize [file join $ws $(fpga-name:S=.bit)]]]"

    "set jtag_cable_name \"*\""

    "if {! [file exists $ws]} {"
    "    puts \"error: workspace $ws does not exist\""
    "    exit 1"
    "}"
    "setws -switch $ws"

    "connect"

    "source [file normalize [file join $xsdkroot scripts sdk util zynqmp_utils.tcl]]"

    # @todo below is RPU-specific, generalize using properties
    "targets -set -nocase -filter {name =~ \"APU*\" && jtag_cable_name =~ $jtag_cable_name} -index 1"
    "rst -system"
    "after 3000"

    "targets -set -nocase -filter {name =~ \"APU*\" && jtag_cable_name =~ $jtag_cable_name} -index 1"
    "reset_apu"

    "targets -set -nocase -filter {name =~ \"RPU*\" && jtag_cable_name =~ $jtag_cable_name} -index 1"
    "clear_rpu_reset"
    "enable_split_mode"

    "targets -set -filter {jtag_cable_name =~ $jtag_cable_name && level==0} -index 0"
    "fpga -file $bit"

    "targets -set -nocase -filter {name =~ \"APU*\" && jtag_cable_name =~ $jtag_cable_name} -index 1"
    "loadhw -hw $hdf -mem-ranges [list {  0x80000000   0xbfffffff} { 0x400000000  0x5ffffffff} {0x1000000000 0x7fffffffff}]"

    "configparams force-mem-access 1"
    "targets -set -nocase -filter {name =~ \"APU*\" && jtag_cable_name =~ $jtag_cable_name} -index 1"

    "source [file join $ws hw psu_init.tcl]"
    "after 3000"
    "psu_init"
    "source [file normalize [file join $xsdkroot scripts sdk util fsbl.tcl]]"
    "after 1000"
    "psu_ps_pl_isolation_removal"
    "after 1000"
    "psu_ps_pl_reset_config"
    "catch {psu_protection}"

    "targets -set -nocase -filter {name =~ \"*R5*0\" && jtag_cable_name =~ $jtag_cable_name} -index 1"
    "rst -processor"
    "catch {XFsbl_TcmEccInit R5_0}"

    "dow $program"

    "bpadd -addr &main"

    "configparams force-mem-access 0"

    "con"
  ;

  print.output $(target) ;
  print.text "#!/usr/bin/env xsct" : true ;
  print.text "# generated by xsdk.jam" ;
  print.lines $(lines) ;
  print.text "" ;
}

TOUCH = [ common.file-touch-command ] ;
if [ os.name ] = NT
{
    RMDIR = rmdir /s /q ;
}
else
{
    RMDIR = rm -rf ;
}

actions run-xsct
{
  $(RMDIR) $(<[1]:S=.xsdkws) && "$(.xsct)" "$(>[1])" && $(TOUCH) "$(<[1])"
}

rule generate-ws ( targets + : sources + : properties * )
{
  # assert.equal [ sequence.length $(targets) ] : 2 ;
  assert.equal [ sequence.length $(sources) ] : 1 ;
}
