# Boost.Build support for the Xilinx SDK (XSDK).

# @todo need to generate an app to get the linker script

import print ;
import errors ;

import toolset ;
import project ;
import feature ;
import targets ;
import type ;
import "class" ;
import common ;
import generators ;

import os ;

if [ MATCH (--debug-configuration) : [ modules.peek : ARGV ] ]
{
  .debug-configuration = true ;
}

feature.extend target-os :
  freertos
  xilsystem
  ;

feature.extend instruction-set :
  armv8
  ;

# @todo this should be part of boost.build
# @todo this depends on what the hdf supports too
feature.feature processor
  : # values
    cortexa9
    cortexa53
    cortexr5
  : # attributes
    propagated optional
  ;

feature.feature xsdk-template : "" : link-incompatible ;
feature.set-default xsdk-template : "" ;
feature.feature xsdk-library : : optional free ;
feature.feature xsdk-configuration : : optional free link-incompatible ;
feature.feature xsdk-language : c c++ : propagated link-incompatible ;
feature.set-default xsdk-language : c++ ;
feature.feature xsdk-processor-id : 0 1 2 3 : propagated link-incompatible ;
feature.set-default xsdk-processor-id : 0 ;

type.register XSDKWS : xsdkws ;

type.register XSCT : xsct ;

type.register MSS : mss ;

type.register HDF : hdf ;
type.register BIT : bit ;
type.register TCL : tcl ;

rule init ( version ? : command * : options * )
{
  # Check that the host operating system is supported.  If it is not,
  # continue without configuring so we can still build targets that do
  # not need this toolset.
  if [ os.name ] = NT || [ os.name ] = CYGWIN || [ os.name ] = LINUX
  {
    command = [ common.get-invocation-command xsdk : xsct : $(command) ] ;

    if $(command)
    {
      local output-lines = [ SPLIT_BY_CHARACTERS [ SHELL "\"$(command)\" -eval 'puts [version]'" ] : "\n" ] ;

      local detected-version-components = [ MATCH "xsct ([0-9][0-9][0-9][0-9]\\.[0-9])" : $(output-lines[1]) ] ;
      local detected-version = $(detected-version-components[1]) ;

      if ! $(detected-version)
      {
        errors.user-error "xsdk: no version detected" ;
      }

      if $(version)
      {
        if $(detected-version) != $(version)
        {
          errors.user-error "xsdk: detected version (" $(detected-version) ") does not match desired (" $(version) ")" ;
        }
      }

      if $(detected-version)
      {
        version = $(detected-version) ;
      }
    }
    else
    {
      errors.user-error "xsdk: xsct not found at" $(command) ;
    }

    root = [ common.get-absolute-tool-path $(command[-1]) ] ;
    root = $(root:P) ;

    if $(.debug-configuration)
    {
      ECHO "xsdk: using xsdk" $(version) "at" $(root) ;
    }

    toolset.flags xsdk .xsct $(condition) : $(root)/bin/xsct ;
  }
  else
  {
    ECHO "xsdk: warning: unsupported operating system" os.name ;
  }
}

class xsct-generator : generator
{
  rule __init__ ( id composing ? : source-types + : target-types-and-names + : requirements * )
  {
    generator.__init__ $(id) $(composing) : $(source-types) : $(target-types-and-names) : $(requirements) ;
  }

  rule run ( project name ? : property-set : sources * )
  {
    return [ generator.run $(project) $(name) : $(property-set) : $(sources) ] ;
  }

  rule generated-targets ( sources + : property-set : project name ? )
  {
    local source = $(sources[0]) ;

    if ! $(name)
    {
      name = [ generator.determine-output-name $(source) ] ;
    }

    local a = [ class.new action $(source) : xsdk.xsct-generator : $(property-set) ] ;
    local t = [ class.new file-target $(name) : XSCT : $(project) : $(a) ] ;

    return [ virtual-target.register $(t) ] ;
  }
}

class ws-generator : generator
{
  rule __init__ ( id composing ? : source-types + : target-types-and-names + : requirements * )
  {
    generator.__init__ $(id) $(composing) : $(source-types) : $(target-types-and-names) : $(requirements) ;
  }

  rule run ( project name ? : property-set : sources * )
  {
    local r = [ generator.run $(project) $(name) : $(property-set) : $(sources) ] ;

    local ps ;
    local vts ;

    if [ class.is-a $(r[1]) : property-set ]
    {
      ps = $(r[1]) ;
      vts = $(r[2-]) ;
    }
    else
    {
      vts = $(r) ;
    }

    local ws-dir ;

    for local vt in $(vts)
    {
      if [ $(vt).type ] = XSDKWS
      {
        local p = [ $(vt).path ] ;
        local n = [ $(vt).name ] ;

        ws-dir = $(p)/$(n) ;
      }
    }

    local properties = [ $(ps).raw ] ;

    local processor = [ $(property-set).get <processor> ] ;

    local instruction-set = [ $(property-set).get <instruction-set> ] ;
    switch $(processor)
    {
      # @todo add microblaze etc
      case cortexr5  : instruction-set ?= armv7 ;
      case cortexa9  : instruction-set ?= armv7 ;
      case cortexa53 : instruction-set ?= armv8 ;
    }

    local architecture = [ $(property-set).get <architecture> ] ;
    switch $(processor)
    {
      case cortexr* : architecture ?= arm ;
      case cortexa* : architecture ?= arm ;
    }

    local processor-id = [ $(property-set).get <xsdk-processor-id> ] ;

    # add properties from createhw
    if ! [ $(property-set).contains-raw <architecture> ]
    {
      properties += <architecture>$(architecture) ;
    }
    if ! [ $(property-set).contains-raw <instructure-set> ]
    {
      properties += <instructure-set>$(instruction-set) ;
    }
    properties += <include>$(ws-dir)/hw ;

### @todo this cannot work, cannot set toolset in usage-requirements
###    local toolset = gcc ;
###    local toolset-version ;
###    switch $(processor)
###    {
###      case cortexr5 : toolset-version = 7xilinxarmr5 ;
###      case cortexa53 : toolset-version = 7xilinxaarch64 ;
###    }
###
###    toolset = clang ;
###    toolset-version = 7 ;
###
###    properties +=  <toolset>$(toolset)-$(toolset-version) ;

    # @todo these should be done in gcc.jam really
    # @todo we should be adding vpu etc here as well
    # @todo maybe these can be added later once we have created hw, bsp, app?
    properties += <cflags>-march=$(instruction-set) ;
    properties += <cflags>-mtune=$(processor) ;

    # add properties from createbsp
    for local vt in $(vts)
    {
      if [ type.is-derived [ $(vt).type ] LIB ]
      {
        local s = [ $(vt).search ] ;

        properties += <include>$(s:D)/include ;
      }
    }

    # add properties from createapp
    properties += <linkflags>"-T $(ws-dir)/app/src/lscript.ld" ;

    ps = [ property-set.create $(properties) ] ;

    return $(ps) $(vts) ;
  }

  rule generated-targets ( sources + : property-set : project name ? )
  {
    local source = $(sources[0]) ;

    if ! $(name)
    {
      name = [ generator.determine-output-name $(source) ] ;
    }

    local a = [ class.new action $(source) : xsdk.ws-generator : $(property-set) ] ;

    local virtual-targets ;
    local t ;

    t = [ class.new file-target $(name) : XSDKWS : $(project) : $(a) ] ;
    virtual-targets += [ virtual-target.register $(t) ] ;

    local build-dir = [ $(t).path ] ;
    local xsdkws-name = [ $(t).name ] ;

    local ws-dir = $(build-dir)/$(xsdkws-name) ;

    local hw-dir = $(ws-dir)/hw ;
    local bsp-dir = $(ws-dir)/bsp ;
    local app-dir = $(ws-dir)/app ;

    # targets generated by createhw

    # @todo do not generate the HDF target since it might be circular
    #t = [ class.new file-target system : HDF : $(project) : $(a) : $(hw-dir) ] ;
    #virtual-targets += [ virtual-target.register $(t) ] ;

    t = [ class.new file-target system : BIT : $(project) : $(a) : $(hw-dir) ] ;
    virtual-targets += [ virtual-target.register $(t) ] ;

    t = [ class.new file-target psu_init : TCL : $(project) : $(a) : $(hw-dir) ] ;
    virtual-targets += [ virtual-target.register $(t) ] ;

    t = [ class.new file-target psu_init : H : $(project) : $(a) : $(hw-dir) ] ;
    virtual-targets += [ virtual-target.register $(t) ] ;
    t = [ class.new file-target psu_init : C : $(project) : $(a) : $(hw-dir) ] ;
    virtual-targets += [ virtual-target.register $(t) ] ;
    # @todo this duplicates whats in psu_init for some reason
    # t = [ class.new file-target psu_init_gpl : H : $(project) : $(a) : $(hw-dir) ] ;
    # virtual-targets += [ virtual-target.register $(t) ] ;
    # t = [ class.new file-target psu_init_gpl : C : $(project) : $(a) : $(hw-dir) ] ;
    # virtual-targets += [ virtual-target.register $(t) ] ;

    # targets generated by createbsp

    t = [ class.new file-target system : MSS : $(project) : $(a) : $(bsp-dir) ] ;
    virtual-targets += [ virtual-target.register $(t) ] ;

    local properties = [ $(property-set).raw ] ;

    local shared ;
    if <link>shared in $(properties)
    {
      shared = true ;
    }

    local processor = [ feature.get-values <processor> : $(properties) ] ;
    local processor-id = [ feature.get-values <xsdk-processor-id> : $(properties) ] ;

    # @todo use <library> (or others) to find the libraries by searching the list, get list from xsct repo?
    t = [ class.new searched-lib-target xil : $(project) : $(shared) : $(bsp-dir)/psu_$(processor)_$(processor-id)/lib : $(a) ] ;
    virtual-targets += [ virtual-target.register $(t) ] ;
    for local l in [ $(property-set).get <xsdk-library> ]
    {
      t = [ class.new searched-lib-target $(l) : $(project) : $(shared) : $(bsp-dir)/psu_$(processor)_$(processor-id)/lib : $(a) ] ;
      virtual-targets += [ virtual-target.register $(t) ] ;
    }

    if <target-os>freertos in $(properties)
    {
      t = [ class.new searched-lib-target freertos : $(project) : $(shared) : $(bsp-dir)/psu_$(processor)_$(processor-id)/lib : $(a) ] ;
      virtual-targets += [ virtual-target.register $(t) ] ;
    }

    return $(virtual-targets) ;
  }
}

rule root ( )
{
  return $(root) ;
}

generators.register [ class.new xsct-generator xsdk.xsct-generator : HDF : XSCT ] ;
generators.register [ class.new ws-generator xsdk.ws-generator : XSCT : XSDKWS XSCT BIT H C TCL MSS LIB ] ;

# @todo these magically result in XSDKWS being dependent on the right stuff
toolset.flags xsdk.xsct-generator XSDK_TEMPLATE <xsdk-template> ;

toolset.flags xsdk.xsct-generator XSDK_LIBRARIES <xsdk-library> ;

toolset.flags xsdk.xsct-generator XSDK_CONFIGURATIONS <xsdk-configuration> ;

toolset.flags xsdk.xsct-generator XSDK_LANGUAGE <xsdk-language>c : "-lang c" ;
toolset.flags xsdk.xsct-generator XSDK_LANGUAGE <xsdk-language>c++ : "-lang c++" ;

toolset.flags xsdk.xsct-generator XSDK_OS <target-os>elf : "-os standalone" ;
toolset.flags xsdk.xsct-generator XSDK_OS <target-os>freertos : "-os freertos10_xilinx" ;
toolset.flags xsdk.xsct-generator XSDK_OS <target-os>xilsystem : "-os xilsystem" ;

toolset.flags xsdk.xsct-generator XSDK_PROC <processor> ;

toolset.flags xsdk.xsct-generator XSDK_PROC_ID <xsdk-processor-id>0 : 0 ;
toolset.flags xsdk.xsct-generator XSDK_PROC_ID <xsdk-processor-id>1 : 1 ;
toolset.flags xsdk.xsct-generator XSDK_PROC_ID <xsdk-processor-id>2 : 2 ;
toolset.flags xsdk.xsct-generator XSDK_PROC_ID <xsdk-processor-id>3 : 3 ;

toolset.flags xsdk.xsct-generator XSDK_LINK <link>shared : configbsp-pass-shared ;
toolset.flags xsdk.xsct-generator XSDK_LINK <link>static : configbsp-pass-static ;

rule xsct-generator ( targets + : sources + : properties * )
{
  generate-build $(targets[1]) $(targets[2]) : $(sources) : $(properties) ;
  generate-run $(targets[1]) $(targets[3]) : $(sources) : $(properties) ;
}

rule generate-build ( targets + : sources + : properties * )
{
  local script-target = $(targets[1]) ;
  local ws-target = $(targets[2]) ;
  local ws-dir = [ on $(ws-target) return $(LOCATE) ] ;
  local ws = $(ws-dir)/$(ws-target:G=) ;

  local hdf = $(ws)/$(hdf-source:G=) ;

  local shared ;
  if <link>shared in $(properties)
  {
    shared = true ;
  }

  local processor = [ feature.get-values <processor> : $(properties) ] ;
  local processor-id = [ feature.get-values <xsdk-processor-id> : $(properties) ] ;
  local target-os = [ feature.get-values <target-os> : $(properties) ] ;

  local xilinx-os-name ;
  switch $(target-os)
  {
    case elf : xilinx-os-name = standalone ;
    case freertos : xilinx-os-name = freertos ;
  }

  local xilinx-app-template = [ feature.get-values <xsdk-template> : $(properties) ] ;
  xilinx-app-template ?= "" ;

  local xilinx-language = [ feature.get-values <xsdk-language> : $(properties) ] ;
  xilinx-language ?= "c++" ;

  local lines ;

  # set the workspace
  # @todo delete the workspace if it exists
  # @todo check for errors
  lines +=
    "if {[file exists $(ws)]} then {"
    "    puts \"error: $(ws) exists.\""
    "    exit 1"
    "}"
    "setws $(ws)"
  ;

  # create the hardware
  # @todo check for errors
  lines += "createhw -name hw -hwspec $(hdf)" ;

  # create and configure the bsp
  # @todo print out all available options nicely
  # @todo check for errors
  lines += "createbsp -name bsp -proc psu_$(processor)_$(processor-id) -hwproject hw -os $(xilinx-os-name)" ;
  # @todo print out all available options for each library nicely
  for l in [ feature.get-values <xsdk-library> : $(properties) ]
  {
    # @todo check for errors
    lines += "setlib -bsp bsp -lib $(l)" ;
  }
  # @todo print out all available options nicely
  for c in [ feature.get-values <xsdk-configuration> : $(properties) ]
  {
    # @todo check for errors
    lines += "configbsp -bsp bsp $(c)" ;
  }
  lines += "updatemss -mss $(ws)/bsp/system.mss" ;
  lines += "regenbsp -bsp bsp" ;

  # create a dummy application for the linker file
  # @todo check for errors
  lines += "createapp -name app -app {$(xilinx-app-template)} -lang $(xilinx-app-language) -bsp bsp -proc psu_$(processor)_$(processor-id) -hwproject hw -os $(xilinx-os-name)" ;

  # build the bsp (but not the application)
  # @todo check for errors
  lines += "projects -build -type bsp -name bsp" ;

  print.output $(script-target) ;
  print.text "#!/usr/bin/env xsct" : true ;
  print.text "# generated by xsdk.jam" ;
  print.lines $(lines) ;
  print.text "" ;
}

rule generate-run ( targets + : sources + : properties * )
{
  local script-target = $(targets[1]) ;
  local ws-target = $(targets[2]) ;
  local ws-dir = [ on $(ws-target) return $(LOCATE) ] ;
  local ws = $(ws-dir)/$(ws-target:G=) ;

  local fpga-name = $(hdf-source:G=) ;

  local hdf = $(ws)/hw/system.hdf ;
  local bit = $(ws)/hw/$(fpga-name) ;

  local shared ;
  if <link>shared in $(properties)
  {
    shared = true ;
  }

  local processor = [ feature.get-values <processor> : $(properties) ] ;
  local processor-id = [ feature.get-values <xsdk-processor-id> : $(properties) ] ;
  local target-os = [ feature.get-values <target-os> : $(properties) ] ;

  local xilinx-os-name ;
  switch $(target-os)
  {
    case elf : xilinx-os-name = standalone ;
    case freertos : xilinx-os-name = freertos ;
  }

  local xilinx-app-template = [ feature.get-values <xsdk-template> : $(properties) ] ;
  xilinx-app-template ?= "" ;

  local xilinx-language = [ feature.get-values <xsdk-language> : $(properties) ] ;
  xilinx-language ?= "c++" ;

  local lines ;

  lines += "set xilinxsdkroot [file normalize $(.root)]" ;

  # set the workspace
  # @todo delete the workspace if it exists
  # @todo check for errors
  lines +=
    "if {$argc != 1} then {"
    "    puts \"usage: $argv0 <program>\""
    "    exit 1"
    "}"
    ;

  lines +=
    "set ws $(ws)"

    "set hdf [file normalize $(hdf)]"
    "set bit [file normalize $(bit)]"

    "set jtag_cable_name \"*\""

    "if {! [file exists $ws]} {"
    "    puts \"error: workspace $ws does not exist\""
    "    exit 1"
    "}"
    "setws -switch $ws"

    "connect"

    "source [file normalize [file join $xilinxsdkroot scripts sdk util zynqmp_utils.tcl]]"

    "targets -set -nocase -filter {name =~ \"APU*\" && jtag_cable_name =~ $jtag_cable_name} -index 1"
    "rst -system"
    "after 3000"

    "targets -set -nocase -filter {name =~ \"APU*\" && jtag_cable_name =~ $jtag_cable_name} -index 1"
    "reset_apu"

    "targets -set -nocase -filter {name =~ \"RPU*\" && jtag_cable_name =~ $jtag_cable_name} -index 1"
    "clear_rpu_reset"
    "enable_split_mode"

    "targets -set -filter {jtag_cable_name =~ $jtag_cable_name && level==0} -index 0"
    "fpga -file $bit"

    "targets -set -nocase -filter {name =~ \"APU*\" && jtag_cable_name =~ $jtag_cable_name} -index 1"
    "loadhw -hw $hdf -mem-ranges [list {  0x80000000   0xbfffffff} { 0x400000000  0x5ffffffff} {0x1000000000 0x7fffffffff}]"

    "configparams force-mem-access 1"
    "targets -set -nocase -filter {name =~ \"APU*\" && jtag_cable_name =~ $jtag_cable_name} -index 1"

    "source [file join $ws hw psu_init.tcl]"
    "after 3000"
    "psu_init"
    "source [file normalize [file join $xilinxsdkroot scripts sdk util fsbl.tcl]]"
    "after 1000"
    "psu_ps_pl_isolation_removal"
    "after 1000"
    "psu_ps_pl_reset_config"
    "catch {psu_protection}"

    "targets -set -nocase -filter {name =~ \"*R5*0\" && jtag_cable_name =~ $jtag_cable_name} -index 1"
    "rst -processor"
    "catch {XFsbl_TcmEccInit R5_0}"

    "dow $program"

    "bpadd -addr &main"

    "configparams force-mem-access 0"

    "con"
  ;

  print.output $(script-target) ;
  print.text "#!/usr/bin/env xsct" : true ;
  print.text "# generated by xsdk.jam" ;
  print.lines $(lines) ;
  print.text "" ;
}

actions ws-generator
{
  $(.xsct) $(<[1])
}
